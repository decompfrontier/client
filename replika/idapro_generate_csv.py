import idautils
import ida_funcs

## TODO: A clever guy (not me, the author) would use capstone to fetch the public symbols of all .a/.so and
# build a list from there

# Exclude prefixes of thirdparty libraries
EXCLUDE_NAME_OLD = [
    # OpenSSL
    "OCSP_",
    "PEM_",
    "d2i_",
    "i2d_",
    "OBJ_",
    "obj_",
    "OPENSSL_",
    "CRYPTO_",
    "openssl_",
    "MD5_",
    "md5_",
    "MD4_",
    "md4_",
    "ossl_",
    "IDEA_",
    "HMAC_",
    "SSL_",
    "ssl_",
    "custom_exts_",
    "BLAKE2b_",
    "BLAKE2s_",
    "DSA_",
    "DH_",
    "ERR_",
    "err_",
    "BIO_",
    "bio_",
    "CMS_",
    "cms_",
    "a2d_",
    "d2a_",
    "Camellia_",
    "bn_",
    "BN_",
    "CAST_",
    "EVP_",
    "BF_",
    "PKCS5_",
    "SCRYPT_",
    "PBE2",
    "PBKDF2P",
    "SMIME_",
    "AES_",
    "EXTENDED_KEY_",
    "i2s_",
    "i2v_",
    "v2i_",
    "s2i_",
    "X509_",
    "x509_",
    "ChaCha20_",
    "NETSCAPE_SPKAC_",
    "BASIC_CONSTRAINTS_",
    "int_bn_mod_",
    "WHIRLPOOL_",
    "whirlpool_",
    "RSA_",
    "RAND_",
    "rand_",
    "PKCS1_",
    "sha256_",
    "sha512_",
    "PKCS7_",
    "PKCS8_",
    "PKCS12_",
    "MDC2_",
    "CT_",
    "CONF_",
    "conf_",
    "CMAC_",
    "COMP_",
    "comp_",
    "OpenSSL_",
    "DHparams_",
    "engine_",
    "ENGINE_",
    "ecp_",
    "ec_",
    "EC_",
    "ECDH_",
    "DSO_",
    "dsa_",
    "DSA_",
    "DES_",
    "DH_",
    "SCT_",
    "CTLOG_",
    "NCONF_",
    "_CONF_",
    "RIPEMD160_",
    "ripemd160_",
    "policy_node_",
    "tree_find_",
    "level_add_",
    "poly1305_",
    "X25519_",
    "ASN1_",
    "asn1_",
    "DISPLAYTEXT_",
    "DIRECTORYSTRING_",
    "UI_",
    "TXT_DB_",
    "SEED_",
    "int_rsa_",
    "sha1_",
    "SHA1_",
    "SHA512_",
    "SHA384_",
    "SHA224_",
    "SHA256_",
    "tlsv1_",
    "TLS_",
    "tls_",
    "dtlsv1_",
    "DTLS_",
    "dtls_",
    "TLSv1_",
    "DTLSv1_",
    "RECORD_LAYER_",
    "ssl3_",
    "SSL3_",
    "tls12_",
    "tls1_",
    "dtls1_",
    "srp_",
    "SRP_",
    "custom_ext_",
    "c2i_",
    "i2c_",
    "i2t_",
    "t2i_",
    "i2a_",
    "a2i_",
    "UTF8_",
    "DSAparams_",
    "ECParameters_",
    "ECPARAMETERS_",
    "ECPKPARAMETERS_",
    "ECPKParameters_",
    "PBEPARAM_",
    "NETSCAPE_CERT_",
    "SXNET_",
    "SXNETID_",
    "vpaes_",
    "aes_",
    "X509V3_",
    "X509v3_",
    "X509at_",
    "o2i_",
    "i2o_",
    "ECDSA_",
    "ecdh_",
    "X9_",
    "PROXY_POLICY_",
    "POLICY_CONSTRAINTS_",
    "PROXY_CERT_INFO_EXTENSION_",
    "GENERAL_SUBTREE_",
    "AUTHORITY_INFO_ACCESS_",
    "ACCESS_DESCRIPTION_",
    "GENERAL_NAME_",
    "OTHERNAME_",
    "EDIPARTYNAME_",
    "DIST_POINT_",
    "ISSUING_DIST_POINT_",
    "CRL_DIST_POINTS_",
    "NOTICEREF_",
    "USERNOTICE_",
    "POLICYQUALINFO_",
    "POLICYINFO_",
    "CERTIFICATEPOLICIES_",
    "AUTHORITY_KEYID_",
    "POLICY_MAPPING_",
    "PKEY_USAGE_PERIOD_",
    "NAME_CONSTRAINTS_",
    "GENERAL_NAMES_",
    "ASIdentifierChoice_",
    "ASIdentifiers_",
    "ASIdOrRange_",
    "ASRange_",
    "IPAddressRange_",
    "IPAddressFamily_",
    "policy_cache_",
    "policy_data_",
    "NETSCAPE_SPKI_",
    "IPAddressChoice_",
    "IPAddressOrRange_",
    "RSAPublicKey_",
    "RC4_",
    "RC2_",
    "Poly1305_",
    "pem_",
    "FIPS_",
    "gcm_",
    "crypto_",
    "evp_",
    "n_ssl3_",
    # libpthread
    "pthread_",
    "pqueue_",
    "pitem_",
    # OpenGL
    "gl",
    # stubs
    ".", # c++ forwarders
    "nullsub_", # empty funcs
    "j_", # jump stubs
    # libxml
    "xml",
    "_xml",
    "__xml",
    "html",
    "libxml_",
    "__docb",
    "__old",
    "__html",
    "docb",
    "xlink",
    "j_xml",
    # libpng
    "png_",
    # libjpeg
    "jpeg_",
    "jinit_",
    "jcopy_",
    "jround_",
    "jdiv_",
    # libTIFF
    "TIFF",
    "_TIFF",
    # Android NDK
    "_ZNSt6__ndk1",
    "_ZTv0_n24_NSt6__ndk1",
    "_ZThn16_NSt6__ndk1",
    # libcurl
    "ASYNC_",
    "async_",
    "curl_",
    # simd stuff
    "_armv7_",
    "_armv8_",
    # zlib
    "libport_",
    "zlib",
    "gz",
    "inflate",
    "deflate",
    "crc32_",
    "adler32",
    "compress",
    "uncompress",
    "base64",
    # cocos2d-x (a clever guy would use a regex)
    #"Log",
    #"km",
    #"_ZN7cocos2d",
    "_ZNK7cocos2d",
    "_ZThn24_N7cocos2d",
    "_ZThn88_N7cocos2d",
    "_ZThn352_N7cocos2d",
    "_ZThn376_N7cocos2d",
    "_ZThn360_N7cocos2d",
    "_ZThn384_N7cocos2d",
    "_ZThn392_N7cocos2d",
    "_ZThn400_N7cocos2d",
    "_ZThn424_N7cocos2d",
    "_ZThn712_N7cocos2d",
    "Java_org_cocos2dx_",
]

EXCLUDE_NAME = [
    # stubs
    ".", # c++ forwarders
    "nullsub_", # empty funcs
    "j_", # jump stubs
]

# Exclude any function that starts with this name
TOTAL_EXCLUDE_OLD = [
    # cocos2d-x
    "lazyInitialize",
    "calculate_line_normal",
    "swap",
    "gaussj",
    # end of cocos2d-x
    "crc32",
    "isolat1ToUTF8",
    "UTF8Toisolat1",
    "inputPush",
    "inputPop",
    "valuePop",
    "valuePush",
    "nodePush",
    "nodePop",
    "namePush",
    "namePop",
    "initGenericErrorDefaultFunc",
    "initxmlDefaultSAXHandler",
    "inithtmlDefaultSAXHandler",
    "initdocbDefaultSAXHandler",
    "zError",
    "get_crc_table",
    "get",
    "set",
    "UTF8ToHtml",
    "getPublicId",
    "getSystemId",
    "getLineNumber",
    "getColumnNumber",
    "isStandalone",
    "hasInternalSubset",
    "hasExternalSubset",
    "internalSubset",
    "externalSubset",
    "resolveEntity",
    "getEntity",
    "getParameterEntity",
    "entityDecl",
    "attributeDecl",
    "elementDecl",
    "notationDecl",
    "unparsedEntityDecl",
    "setDocumentLocator",
    "startDocument",
    "endDocument",
    "attribute",
    "startElement",
    "endElement",
    "reference",
    "characters",
    "ignorableWhitespace",
    "processingInstruction",
    "setNamespace",
    "getNamespace",
    "checkNamespace",
    "namespaceDecl",
    "comment",
    "cdataBlock",
    "HMAC",
    "RC4",
    "SHA1",
    "SHA512",
    "SHA384",
    "SHA256",
    "SHA224",
    "X25519",
    "WHIRLPOOL",
    "name_cmp",
    "do_dtls1_write",
    "do_engine_lock_init_ossl_",
    "do_ssl3_write",
    "statem_flush",
    "level_find_node",
    "__strlen_chk",
    "mktime",
    "closedir",
    "_ZNKSt6__ndk18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_",
    "strtod",
    "strlen",
    "_ZNSt6__ndk115__thread_structD1Ev",
    "madvise",
    "strftime",
    "siglongjmp",
    "isxdigit",
    "getcwd",
    "acosf",
    "calloc",
    "dlclose",
    "setpriority",
    "strsep",
    "fopen",
    "sigfillset",
    "gethostname",
    "dlsym",
    "tanf",
    "fseek",
    "kill",
    "getsockname",
    "listen",
    "_ZNSt6__ndk16localeD1Ev",
    "log10",
    "clock_gettime",
    "srandom",
    "gai_strerror",
    "vsnprintf",
    "opendir",
    "asinf",
    "pthread_cond_wait",
    "connect",
    "poll",
    "pthread_cond_destroy",
    "sysconf",
    "toupper",
    "strcmp",
    "fflush",
    "pthread_cond_init",
    "strspn",
    "__memcpy_chk",
    "memcmp",
    "recv",
    "atof",
    "setbuf",
    "signal",
    "scandir",
    "getuid",
    "sem_init",
    "tcgetattr",
    "pthread_exit",
    "pthread_self",
    "logf",
    "__get_h_errno",
    "dlopen",
    "__stack_chk_fail",
    "fclose",
    "alphasort",
    "powf",
    "ferror",
    "pthread_rwlock_rdlock",
    "stat",
    "fgets",
    "cos",
    "realloc",
    "_ZNSt6__ndk16thread4joinEv",
    "getegid",
    "strtok",
    "_ZNSt6__ndk16thread20hardware_concurrencyEv",
    "atoi",
    "getgid",
    "execl",
    "pthread_key_create",
    "rename",
    "mlock",
    "snprintf",
    "_ZNKSt6__ndk18ios_base6getlocEv",
    "chmod",
    "getpriority",
    "atan2",
    "_ZNKSt6__ndk16locale9use_facetERNS0_2idE",
    "mprotect",
    "_ZNSt6__ndk16threadD1Ev",
    "__android_log_print",
    "free",
    "pthread_create",
    "tcsetattr",
    "expf",
    "frexp",
    "memset",
    "getnameinfo",
    "printf",
    "pthread_once",
    "strerror_r",
    "fseeko",
    "clock",
    "memchr",
    "isalpha",
    "pthread_rwlock_wrlock",
    "malloc",
    "__vsnprintf_chk",
    "munmap",
    "isalnum",
    "__cxa_finalize",
    "pthread_mutex_lock",
    "islower",
    "_ZNSt6__ndk18ios_baseD2Ev",
    "strdup",
    "pthread_rwlock_destroy",
    "time",
    "__strncpy_chk",
    "select",
    "_ZNKSt6__ndk16locale9has_facetERNS0_2idE",
    "tolower",
    "setsockopt",
    "gmtime",
    "pthread_rwlock_unlock",
    "sem_destroy",
    "sin",
    "_ZNSt6__ndk115__thread_structC1Ev",
    "socket",
    "__cxa_atexit",
    "srand",
    "geteuid",
    "getpeername",
    "difftime",
    "isspace",
    "fstat",
    "random",
    "sincos",
    "waitpid",
    "lseek",
    "dup",
    "pthread_detach",
    "pthread_key_delete",
    "strncmp",
    "_ZNSt6__ndk119__thread_local_dataEv",
    "pthread_mutex_destroy",
    "_Znwm",
    "sem_post",
    "__cxa_pure_virtual",
    "sinf",
    "fileno",
    "inet_pton",
    "freeaddrinfo",
    "fread",
    "putchar",
    "_ZdlPv",
    "fork",
    "getpid",
    "__cxa_guard_acquire",
    "sigaction",
    "readdir",
    "sincosf",
    "rand",
    "socketpair",
    "recvfrom",
    "strtoul",
    "bind",
    "strncpy",
    "memrchr",
    "fwrite",
    "strcpy",
    "getenv",
    "ftello",
    "__errno",
    "getsockopt",
    "gethostbyname",
    "ceil",
    "strncasecmp",
    "_ZNSt6__ndk15mutexD1Ev",
    "memmove",
    "strerror",
    "strtol",
    "exp2f",
    "fcntl",
    "_ZNSt6__ndk15mutex4lockEv",
    "fmod",
    "_ZNSt6__ndk120__throw_system_errorEiPKc",
    "isgraph",
    "puts",
    "exp",
    "_ZNSt6__ndk16chrono12steady_clock3nowEv",
    "pow",
    "_ZNSt6__ndk16localeC1Ev",
    "isprint",
    "ioctl",
    "__vsprintf_chk",
    "sem_wait",
    "fdopen",
    "setjmp",
    "alarm",
    "localtime",
    "pthread_equal",
    "_ZNSt6__ndk15mutex6unlockEv",
    "exit",
    "arc4random",
    "getpwuid_r",
    "inet_ntop",
    "pthread_getspecific",
    "strcasecmp",
    "atanf",
    "mmap",
    "fputs",
    "strcspn",
    "longjmp",
    "send",
    "sprintf",
    "abort",
    "accept",
    "close",
    "sigdelset",
    "write",
    "strcat",
    "atan2f",
    "gmtime_r",
    "memcpy",
    "_Znam",
    "dlerror",
    "pthread_cond_signal",
    "fputc",
    "access",
    "sendto",
    "sscanf",
    "open",
    "read",
    "feof",
    "_ZNSt6__ndk16localeC1ERKS0_",
    "_ZNSt6__ndk18ios_base5clearEj",
    "rand_r",
    "remove",
    "bsearch",
    "getauxval",
    "pthread_setspecific",
    "__strcpy_chk",
    "strchr",
    "strstr",
    "fprintf",
    "sigsetjmp",
    "dup2",
    "pthread_mutex_unlock",
    "_ZSt18uncaught_exceptionv",
    "ftell",
    "pthread_rwlock_init",
    "modf",
    "strpbrk",
    "getaddrinfo",
    "__dynamic_cast",
    "gettimeofday",
    "isupper",
    "__cxa_guard_release",
    "sqrt",
    "basename",
    "__strchr_chk",
    "shutdown",
    "floor",
    "vfprintf",
    "pthread_mutex_init",
    "_ZNSt6__ndk18ios_base4initEPv",
    "strrchr",
    "sigprocmask",
    "cosf",
    "if_nametoindex",
    "_ZdaPv",
    "qsort",
    "strtok_r",
    "log",
    "atol",
    "fmodf",
]

TOTAL_EXCLUDE = []

class GenerateData:
    def __init__(self):
        self.name = ""
        self.start = 0
        self.end = 0

    def get_txt(self) -> str:
        return "{}\t{}\t{}".format(self.name, self.start, self.end)

    def get_csv(self) -> str:
        sz = self.end - self.start
        ss = hex(self.start)
        diff = 18 - len(ss)
        if diff > 0:
            rpt = "0" * diff
            ss = "{}{}{}".format("0x", rpt, ss[2:])
        sz = str(sz)
        diff = 6 - len(sz)
        if diff > 0:
            rpt = "0" * diff
            sz = "".join((rpt, sz))
        
        name = self.name
        if name[:4] == "sub_" or name == "start_0":
            name = ""

        return "{},U,{},{}".format(ss, sz, name)


ALL_FUNCTIONS = []

for ea in idautils.Functions():
    name = ida_funcs.get_func_name(ea)
    found = False
    for exclude in EXCLUDE_NAME:
        exlen = len(exclude)
        if name[:exlen] == exclude:
            found = True
    for exclude in TOTAL_EXCLUDE:
        if name == exclude:
            found = True

    if not found:
        g = GenerateData()
        fnc = ida_funcs.get_func(ea)

        g.name = name
        g.start = fnc.start_ea
        g.end = fnc.end_ea
        
        ALL_FUNCTIONS.append(g)
    
functions_all_txt = ""
for x in ALL_FUNCTIONS:
    functions_all_txt = "\n".join((functions_all_txt, x.get_txt()))

with open("C:\\Temp\\functions_all.txt", "w") as fp:
    fp.write(functions_all_txt[1:])

functions_all_csv = ""
for x in ALL_FUNCTIONS:
    functions_all_csv = "\n".join((functions_all_csv, x.get_csv()))

with open("C:\\Temp\\viking_functions.csv", "w") as fp:
    fp.write("Address,Quality,Size,Name")
    fp.write(functions_all_csv)

print("OK!")

