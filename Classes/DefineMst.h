#pragma once

class DefineMst : public cocos2d::CCNode
{
	SHARED_SINGLETON(DefineMst);

public:
	void getActionPointHealCnt();
	void getActionPointRecoverFixed();
	void getActionPointThreshold();
	void getArenaBattleTimeLimit();
	void getArenaLoopMaxRank();
	void getArenaMaxRank();
	void getArenaNeedMissionID();
	void getArenaTutoNpcInfo();
	void getCampaignFlg();
	void getColosseumShopTicket();
	void getContinuDiaCnt();
	void getDBBCrystalValueIntervalTurn();
	void getDBBCrystalValueIntervalTurnCrystal();
	void getDBBCrystalValueMaxUBBActivationPerTurn();
	void getDBBCrystalValueOverDriveCrystalRate();
	void getDBBCrystalValueOverdriveModifierBBSBB();
	void getDBBCrystalValueOverdriveModifierUBB();
	void getDBBCrystalValueUBBCrystal();
	void getDBBFixedSettingsShardBoostStartTurnDelay(int);
	void getDefaultOverDriveGageLimit();
	void getDefaultUnitCnt();
	void getDefaultWarehouseCnt();
	void getEggUnit();
	void getExtPlusMaxCnt();
	void getFeInfoAtkUP();
	void getFeInfoDamageGuard();
	void getFeInfoDefUP();
	void getFeInfoHelUP();
	void getFeInfoOD();
	void getFeInfoSpark();
	void getFeInfoTurn();
	void getFightPointHealCnt();
	void getFriendExtCnt();
	void getFriendPointReinFriend();
	void getFriendPointReinFriendMy();
	void getFriendPointReinFriendMyRate();
	void getFriendPointReinFriendRate();
	void getFriendPointReinOther();
	void getFriendPointReinOtherMy();
	void getFriendPointReinOtherMyRate();
	void getFriendPointReinOtherRate();
	void getIncOverDriveGageAttack();
	void getIncOverDriveGageExtraSkill();
	void getIncOverDriveGageLimit();
	void getIncOverDriveGageSkill();
	void getIncOverDriveGageStrongAttack();
	void getIncOverDriveGageTurn();
	void getInitSummonerArmID();
	void getInitialUnit();
	void getItemBoxExtCnt();
	void getKarmaPerAchievePoint();
	void getLoadFlg();
	void getMaxAchievePoint();
	void getMaxAchievePointItemPerDay();
	void getMaxAchievePointKarmaPerDay();
	void getMaxAchievePointUnitPerDay();
	void getMaxAchievePointZelPerDay();
	void getMaxAchievementChallengeAcceptCnt();
	void getMaxAchievementRecordChallengeAcceptCnt();
	void getMaxBlackListCnt();
	void getMaxCBP();
	void getMaxColosseumTicket();
	void getMaxFriendPoint();
	int getMaxKarma();
	void getMaxMultiP();
	void getMaxOverDriveGageLimit();
	void getMaxPartyDeckCnt();
	void getMaxRaidP();
	void getMaxSummonerFriendPoint();
	void getMaxSummonerSP();
	void getMaxTeamLv();
	void getMaxUnitCnt();
	void getMaxWarehouseCnt();
	int getMaxZel();
	void getMaxfrohunP();
	void getMedalMaxNum();
	void getOverDriveContinueTurn();
	void getPermitInvitation();
	void getRaidBagCnt();
	int getRecoverTimeAction();
	int getRecoverTimeFight();
	void getRecoverTimeFrohun();
	void getRecoverTimeMulti();
	void getRecoverTimeRaid();
	void getResetFeSkillDiaCnt();
	void getTutoGachaID();
	void getTutorialDungeonID();
	void getUnitBoxExtCnt();
	void getUnitMixGreatExpRate();
	void getUnitMixSuperExpRate();
	void getVerifyFlg();
	void getZelPerAchievePoint();
	void parseOverDriveParam(std::string);
	void setActionPointHealCnt(int);
	void setActionPointRecoverFixed(int);
	void setActionPointThreshold(int);
	void setArenaBattleTimeLimit(int);
	void setArenaMaxRank(int);
	void setArenaNeedMissionID(std::string);
	void setArenaTutoNpcInfo(std::string);
	void setCampaignFlg(int);
	void setColosseumShopTicket(int);
	void setContinuDiaCnt(int);
	void setDBBCrystalValues(std::string);
	void setDBBFixedSettingValues(std::string);
	void setDefaultOverDriveGageLimit(int);
	void setDefaultUnitCnt(int);
	void setDefaultWarehouseCnt(int);
	void setEggUnit(std::string);
	void setExtPlusMaxCnt(int);
	void setFeParams(std::string);
	void setFightPointHealCnt(int);
	void setFriendExtCnt(int);
	void setFriendPointReinFriend(int);
	void setFriendPointReinFriendMy(int);
	void setFriendPointReinFriendMyRate(float);
	void setFriendPointReinFriendRate(float);
	void setFriendPointReinOther(int);
	void setFriendPointReinOtherMy(int);
	void setFriendPointReinOtherMyRate(float);
	void setFriendPointReinOtherRate(float);
	void setIncOverDriveGageAttack(int);
	void setIncOverDriveGageExtraSkill(int);
	void setIncOverDriveGageLimit(int);
	void setIncOverDriveGageSkill(int);
	void setIncOverDriveGageStrongAttack(int);
	void setIncOverDriveGageTurn(int);
	void setInitSummonerArmID(std::string);
	void setInitialUnit(std::string);
	void setItemBoxExtCnt(int);
	void setKarmaPerAchievePoint(int);
	void setLoadFlg(bool);
	void setMaxAchievePoint(int);
	void setMaxAchievePointItemPerDay(int);
	void setMaxAchievePointKarmaPerDay(int);
	void setMaxAchievePointUnitPerDay(int);
	void setMaxAchievePointZelPerDay(int);
	void setMaxAchievementChallengeAcceptCnt(int);
	void setMaxAchievementRecordChallengeAcceptCnt(int);
	void setMaxBlackListCnt(int);
	void setMaxCBP(int);
	void setMaxColosseumTicket(int);
	void setMaxFriendPoint(int);
	void setMaxKarma(int);
	void setMaxMultiP(int);
	void setMaxOverDriveGageLimit(int);
	void setMaxPartyDeckCnt(int);
	void setMaxRaidP(int);
	void setMaxSummonerFriendPoint(int);
	void setMaxSummonerSP(int);
	void setMaxTeamLv(int);
	void setMaxUnitCnt(int);
	void setMaxWarehouseCnt(int);
	void setMaxZel(int);
	void setMaxfrohunP(int);
	void setMedalMaxNum(int);
	void setOverDriveContinueTurn(int);
	void setPermitInvitation(int);
	void setRaidBagCnt(int);
	void setRecoverTimeAction(int);
	void setRecoverTimeFight(int);
	void setRecoverTimeFrohun(int);
	void setRecoverTimeMulti(int);
	void setRecoverTimeRaid(int);
	void setResetFeSkillDiaCnt(int);
	void setTutoGachaID(std::string);
	void setTutorialDungeonID(std::string);
	void setUnitBoxExtCnt(int);
	void setUnitMixGreatExpRate(float);
	void setUnitMixSuperExpRate(float);
	void setVerifyFlg(int);
	void setZelPerAchievePoint(int);
};
