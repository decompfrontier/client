#pragma once

class Utils
{
public:
	class FpsTracker : public cocos2d::CCObject
	{
	public:
		SHARED_SINGLETON(FpsTracker);

		FpsTracker();
		~FpsTracker();

		bool areBGEffectsOn();
		int getFrameRate();
		bool isFrameRateBelowThreshold();
		void setBGEffectsOn(bool b);
		void startTracker();
		void update();

	};

	static int magic_num1;
	static int point_num_name;
	static int point_num_123;
	static std::string mInfo;
	static std::string pointerName;

	static void CompareStringNumbers(std::string, std::string);
	static void GCD(int, int);
	static void GetResourcePath(char const*);
	static void RJvalueToString(rapidjson::GenericValue<rapidjson::UTF8<char>, rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Member const*&);
	static void ReadIntoJson(std::string&, Json::Value&, bool);
	static void ReadIntoJson(std::vector<char>*, Json::Value&, bool);
	static void ReadTextFile(std::vector<char>*, char const*);
	static void SetReducedPixelFormat(bool);
	static void SimpleProfilerTick(int);
	static void UnsignedCharArrayToHexString(uchar const*, uint);
	static void androRep(std::string);
	static void appsflyerTrackAppLaunch();
	static void backgroundModeTimeRemaining();
	static void canEnterMissions(bool);
	static void canHideAdsNow();
	static void changeSceneWithDeepLink(cocos2d::CCScene*);
	static void checkAPKZipFileList();
	static void clearCache(std::string);
	static void clearDeepLinkParam();
	static void clearWithSpaces(std::string&);
	static void convertCommaInt(int);
	static void convertInt(int);
	static void convertTimeInt(int);
	static void convertTimeInt(int, int);
	static void copyAndroidManifestFileName(std::string&);
	static void copyDexFileName(std::string&);
	static void copyGameLibraryFileName(std::string&);
	static void copyNativeLibraryDirFieldName(std::string&);
	static void copySHA1Name(std::string&);
	static void copySHA256Name(std::string&);
	static void createNullArenaRankMst();
	static void disableLoginSceneFastFileCheck();
	static void enableLoginSceneFastFileCheck(cocos2d::CCObject*);
	static void existsLocalFileInLoginScene(std::string const&);
	static void fbPostStoryAreaCleared(std::string, std::string);
	static void fbPostStoryMegaRare(std::string, std::string);
	static void fbPostStoryRankAchieved(int, std::string);
	static void fbPostStorySuperRare(std::string, std::string);
	static void fbPostStoryTutorialComplete();
	static void fbPostStoryUnitEvolve(std::string, std::string, std::string);
	static void fbPostStoryUnitLevelUp(std::string, std::string, std::string);
	static void filterFilesForiPhone5(cocos2d::CCMutableDictionary<std::string, cocos2d::CCString*>*);
	static void filterOutExistingFiles(cocos2d::CCMutableDictionary<std::string, cocos2d::CCString*>*, std::map<std::string, char>&);
	static void filterOutExistingFiles(cocos2d::CCMutableDictionary<std::string, cocos2d::CCString*>*, std::map<std::string, char>&);
	static void flightPathCheckPoint(std::string);
	static void flurryTrackEvent(char const*, ...);
	static void forceEraseDeadUnits(cocos2d::CCObject*);
	static void forceGetAllBattleItems();
	static void from_string<float>(float&, std::string const&, std::ios_base& (*)(std::ios_base&));
	static void from_string<int>(int&, std::string const&, std::ios_base& (*)(std::ios_base&));
	static void getAmazonUserID();
	static void getAndroidManifestCRC32(uint&);
	static void getApplicationVersion();
	static void getBuildNo();
	static void getBundleVersion();
	static void getCYPayAppKey();
	static void getCacheFiles(std::map<std::string, char>&);
	static void getClassesDexCRC32(uint&);
	static void getCountryCode();
	static void getCurrentLanguage();
	static void getDeepLinkParam();
	static void getDeviceFreeDiskSpace();
	static void getDevicePlatformLowerCase();
	static void getDeviceSDKVersion();
	static void getDeviceWriteablePath();
	static void getFacebookStoriesBaseUrl();
	static void getGameNativeLibraryCRC32(uint&);
	static void getGameNativeLibraryHash();
	static void getHash(uchar const*, uint);
	static void getLanguageShortName(cocos2d::LanguageType);
	static void getLevelUpEvent(int);
	static const std::string& getMInfo() { return mInfo; }
	static void getNativeLibraryDir();
	static void getPlayerTokenParameterString();
	static void getSignatureByteArray(_JNIEnv*, _jobject*);
	static void getSignatureHash(_JNIEnv*, _jbyteArray*);
	static void getStringSize(std::string&, float);
	static void getTotalRAMSize();
	static void getURLEncodedDeviceModel();
	static void hasDeepLinkParam();
	static void hasModGame();
	static bool hasReportedID();
	static void isAndroidManifestCRC32Correct();
	static void isApplicationRunningInBackgroundMode();
	static void isBundleNameCorrect();
	static void isClassesDexCRC32Correct();
	static void isEnabledLoginSceneFastFileCheck();
	static void isFileExist(std::string);
	static void isGameNativeLibraryCRC32Correct();
	static void isNumber(std::string);
	static void isSignatureCorrect();
	static void isSignatureEqual(uchar const*, uint);
	static void isSystemVersioniOS7Onwards();
	static void isSystemVersioniOS8Onwards();
	static void isTapjoyInitialized();
	static void isiPad();
	static void isiPhoneX();
	static void lastPathComponent(std::string);
	static void localText(char const*);
	static void makeCRC32Table(uint*);
	static void memReadLine(uchar*, uint, uint, uint*);
	static void mt_parseList(std::string const&, std::string const&);
	static void objectRect(cocos2d::CCPoint, cocos2d::CCSize const&);
	static void openPrivacyPolicyBrowser();
	static void openTermsAndConditionsBrowser();
	static void openURL(char const*);
	static void parseJSONForDataManager(std::string&);
	static void point_1();
	static void point_2();
	static void point_3();
	static void point_4();
	static void point_DME();
	static void point_DMS();
	static void point_EC();
	static void point_EE();
	static void point_EE2();
	static void point_ES();
	static void point_ES2();
	static void point_FC();
	static void point_FE();
	static void point_FS();
	static void point_ICC();
	static void point_ICE();
	static void point_ICS();
	static void point_d();
	static void point_k();
	static void point_ke();
	static void postToOpenGraph(std::string, std::string, std::string, std::string, std::string);
	static void prepareTrackDamage(int);
	static void printCurrentTime(char const*);
	static void printJson(Json::Value&);
	static void profileTimeInBetween(bool, char const*);
	static void randFloat();
	static void randProbability(float);
	static void randRange(int, int);
	static void readJSONForDataManager(cocos2d::CCObject*);
	static void removeLoadingScreen(bool, cocos2d::CCLayer*);
	static void reportID(std::string);
	static void resetAllMsts();
	static void restartFromTitleScene(bool);
	static void returnToTitleScene(bool, bool);
	static void reverseString(std::string);
	static void saveLastEvent(char const*, char const*, char const*, int);
	static void screenScale();
	static void screenshotNode(cocos2d::CCNode*);
	static void setCountryCode(std::string);
	static void setEnableTrackStatChanges(bool);
	static void setEnableTrackStatChanges(bool);
	static void setMInfo(std::string);
	static void setModGame();
	static void setMultiTouchEnabled(bool);
	static void setPushNotificationsEnable(bool);
	static void setReportedID();
	static void setTapjoyContext();
	static void setuserIdForAppsflyer(char const*);
	static void showAds(bool, int, cocos2d::CCScene*);
	static void stayAwake(bool);
	static void submitHighScoreArenaPoints();
	static void submitHighScorePlayerExp();
	static void submitHighScorePlayerRank(int rank);
	static void test(cocos2d::CCMutableDictionary<std::string, cocos2d::CCString*>*, std::map<std::string, char>&, std::vector<std::string> const&, int, int);
	static void trackDamage(int);
	static void trackDungeon(char const*, std::string);
	static void trackDungeon(char const*, std::string);
	static void trackEvent(char const*, char const*, char const*, char const*, char const*, char const*, char const*, char const*, int);
	static void trackEvent(char const*, char const*, char const*, char const*, char const*, char const*, int);
	static void trackEvent(char const*, char const*, char const*, char const*, int);
	static void trackEvent(char const*, char const*, int);
	static void trackEvent2(char const*, char const*);
	static void trackItemCount(int, std::string&);
	static void trackLastEvent();
	static void trackLastEvent();
	static void trackMSTEvent(char const*, char const*, char const*, char const*, int);
	static void trackMission(char const*, std::string);
	static void trackPurchase(char const*, char const*, char const*, float);
	static void trackReceiveDungeonKey(std::string);
	static void trackStatChanges();
	static void trackStatChangesHelper(char const*, int&, int);
	static void trackStatOnLogin();
	static void truncateString(char const*, int);
	static void tryFixingUserParty();
	static void unitMstExists(cocos2d::CCObject*);
	static void unitMstExists(std::string);
	static void updateDeviceTokenOnServer();
	static void writeFile(char const*, int, std::string);

	static void showLoadingScreen(cocos2d::extension::CCHttpRequest* req, bool, cocos2d::CCLayer*, bool);
	static std::string getDevicePlatform();
	static std::string getDeviceVID();
	static std::string getDeviceOS();
	static std::string getDeviceModel();
	static std::string getAppKey();
	static std::string getDeviceAltVid();
	static std::string getUniqueIdentifier();
	static std::string URLEncodedString(std::string input);
	static std::string getBundleName();
	static time_t getCurrentTimeMs();

};
