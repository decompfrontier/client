#pragma once

class UserTeamInfo : public cocos2d::CCObject
{
	SHARED_SINGLETON(UserTeamInfo);

public:
	
	UserTeamInfo();
	~UserTeamInfo();

	/* to fix */

	int decActionRestTimer(void) const;
	int decFightRestTimer(void) const;
	int getActionPoint(void) const;
	int getActionRestTimer(void) const;
	int getActiveDeckNum(void) const;
	unsigned int getAddFrdCnt(void) const { return addFrdCnt; }
	int getAddUnitCnt(void) const;
	int getAddWarehouseCnt(void) const;
	int getArenaDeckNum(void) const;
	int getBraveCoin(void) const;
	int getBravePointsCurrent(void) const;
	int getBravePointsTotal(void) const;
	int getColosseumTicket(void) const;
	int getCompletedTaskCount(void) const;
	int getDeckCost(void) const;
	int getEnergyTickets(void) const;
	int getExp(void) const;
	int getFightPoint(void) const;
	int getFightRecoveryTime(void) const;
	int getFightRestTimer(void) const;
	int getFreeGems(void) const;
	int getFriendAgreeCnt(void) const;
	int getFriendMessage(void) const;
	int getFriendMessageOrg(void) const;
	int getFriendPoint(void) const;
	int getGiftRecieveCnt(void) const;
	int getInboxMessagesCnt(void) const;
	int getInventorySpaceTickets(void) const;
	int getItemSpaceTickets(void) const;
	int getKarma(void) const;
	int getLv(void) const;
	int getMaxActionPoint(void) const;
	int getMaxEqpSlotCnt(void) const;
	int getMaxFightPoint(void) const;
	int getMaxFrdCnt(void) const;
	int getMaxUnitCnt(void) const;
	int getMaxWarehouseCnt(void) const;
	int getMultiDeckNum(void) const;
	int getMysteryBoxCount(void) const;
	int getPaidGems(void) const;
	int getPresentCnt(void) const;
	int getRainbowCoin(void) const;
	int getReinforcementDeckEx1Num(void) const;
	int getReinforcementDeckEx2Num(void) const;
	int getReinforcementDeckNum(void) const;
	int getServerActiveDeckNum(void) const;
	int getSlotgameFlg(void) const;
	int getSumFrdCnt(void) const;
	int getSumUnitCnt(void) const;
	int getSummonTicket(void) const;
	int getTotalGems(void) const;
	int getTotalTickets(void) const;
	int getUserID(void) const;
	int getWantGift(void) const;
	int getWarehouseCnt(void) const;
	int getZel(void) const;
	int incKarma(int) const;
	int incZel(int) const;
	int setActionPoint(int) const;
	int setActionRestTimer(int) const;
	int setActiveDeckNum(int) const;
	int setAddFrdCnt(int) const;
	int setAddUnitCnt(int) const;
	int setAddWarehouseCnt(int) const;
	int setArenaDeckNum(int) const;
	int setBraveCoin(int) const;
	int setBravePointsCurrent(int) const;
	int setBravePointsTotal(int) const;
	int setColosseumTicket(int) const;
	int setCompletedTaskCount(int) const;
	int setDeckCost(int) const;
	int setEnergyTickets(ushort) const;
	int setExp(int) const;
	int setFightPoint(int) const;
	int setFightRestTimer(int) const;
	int setFreeGems(int) const;
	int setFriendAgreeCnt(int) const;
	int setFriendMessage(std::string) const;
	int setFriendMessageOrg(std::string) const;
	int setFriendPoint(int) const;
	int setGiftRecieveCnt(int) const;
	int setInboxMessagesCnt(int) const;
	int setInventorySpaceTickets(ushort) const;
	int setItemSpaceTickets(ushort) const;
	int setKarma(int) const;
	int setKarma(int) const;
	int setLv(int) const;
	int setMaxActionPoint(int) const;
	int setMaxEqpSlotCnt(int) const;
	int setMaxFightPoint(int) const;
	int setMaxFrdCnt(int) const;
	int setMaxUnitCnt(int) const;
	int setMultiDeckNum(int) const;
	int setMysteryBoxCount(int) const;
	int setPaidGems(int) const;
	int setPresentCnt(int) const;
	int setRainbowCoin(int) const;
	int setReinforcementDeckEx1Num(int) const;
	int setReinforcementDeckEx2Num(int) const;
	int setReinforcementDeckNum(int) const;
	int setServerActiveDeckNum(int) const;
	int setSlotgameFlg(bool) const;
	int setSummonTicket(ushort) const;
	int setUserID(std::string) const;
	int setWantGift(std::string) const;
	int setWarehouseCnt(int) const;
	int setZel(int) const;

	private:
		_DWORD dword30;
		_BYTE byte34;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word35;
		_BYTE byte37;
		_DWORD dword38;
		_DWORD dword3C;
		_BYTE byte40;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word41;
		_BYTE byte43;
		_DWORD dword44;
		_DWORD dword48;
		_BYTE byte4C;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word4D;
		_BYTE byte4F;
		_DWORD dword50;
		_DWORD dword54;
		_BYTE byte58;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word59;
		_BYTE byte5B;
		_DWORD dword5C;
		_DWORD dword60;
		_BYTE byte64;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word65;
		_BYTE byte67;
		_DWORD dword68;
		_DWORD dword6C;
		_BYTE byte70;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word71;
		_BYTE byte73;
		_DWORD dword74;
		_DWORD dword78;
		_BYTE byte7C;
		_BYTE gap7D[7];
		_DWORD dword84;
		_BYTE byte88;
		_BYTE gap89[11];
		_DWORD dword94;
		_BYTE byte98;
		__attribute__((aligned(8))) _DWORD dwordA0;
		_BYTE byteA4;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD wordA5;
		_BYTE byteA7;
		_DWORD dwordA8;
		unsigned int addFrdCnt;
		_DWORD dwordB0;
		_BYTE byteB4;
		_BYTE gapB5[7];
		_DWORD dwordBC;
		_BYTE byteC0;
		__attribute__((aligned(8))) _DWORD dwordC8;
		_BYTE byteCC;
		_BYTE gapCD[7];
		_DWORD dwordD4;
		_BYTE byteD8;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD wordD9;
		_BYTE byteDB;
		_DWORD dwordDC;
		_OWORD owordE0;
		_OWORD owordF0;
		_OWORD oword100;
		_BYTE gap110[12];
		_DWORD dword11C;
		_BYTE byte120;
		__attribute__((packed)) __attribute__((aligned(8))) _OWORD oword128;
		_BYTE gap138[20];
		_DWORD dword14C;
		_BYTE byte150;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word151;
		_BYTE byte153;
		_DWORD dword154;
		_DWORD dword158;
		_BYTE byte15C;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word15D;
		_BYTE byte15F;
		_DWORD dword160;
		_DWORD dword164;
		_BYTE byte168;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word169;
		_BYTE byte16B;
		_DWORD dword16C;
		_DWORD dword170;
		_BYTE byte174;
		__attribute__((packed)) __attribute__((aligned(1))) _WORD word175;
		_BYTE byte177;
		_DWORD dword178;
		_BYTE gap17C[20];
		_QWORD qword190;
		_BYTE gap198[4];
		__attribute__((packed)) __attribute__((aligned(1))) _QWORD qword19C;
		_DWORD dword1A4;
		_BYTE byte1A8;
		__attribute__((packed)) __attribute__((aligned(4))) _QWORD qword1AC;
		_DWORD dword1B4;
		_QWORD qword1B8;
		_QWORD qword1C0;
		_DWORD dword1C8;
		_DWORD dword1CC;
		_OWORD oword1D0;
};